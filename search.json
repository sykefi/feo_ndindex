[
  {
    "objectID": "processing_flow_stac.html",
    "href": "processing_flow_stac.html",
    "title": "Gapless S2 index mosaics",
    "section": "",
    "text": "%load_ext autoreload\n%autoreload 2\n\nimport os\nimport numpy as np\nimport rasterio as rio\n\nfrom pathlib import Path\nfrom src.functions import *\nimport matplotlib.pyplot as plt\nimport cubo\nimport xarray as xr\nimport rioxarray as rxr\nfrom pyproj import Transformer\nThis example shows how to process Sentinel 2 index mosaics available here into gapless mosaics and derive yearly statistics using Paituli STAC.\nFirst, set the url for Paituli stac.\npaituli_stac_url = 'https://paituli.csc.fi/geoserver/ogc/stac/v1'\nUse cubo to easily create the required data cube. Cubo requires the coordinates to be in EPSG:4326 so we need a transformer.\nt = Transformer.from_crs('EPSG:3067', 'EPSG:4326')\n\nlat, lon = t.transform(457325, 7702545)\nda = cubo.create(\n    lat=lat, # Central latitude of the cube\n    lon=lon, # Central longitude of the cube\n    collection=\"sentinel_2_monthly_index_mosaics_at_fmi\", # Name of the STAC collection\n    bands=[\"ndvi\"], # Bands to retrieve\n    start_date=\"2016-04-01\", # Start date of the cube\n    end_date=\"2025-05-31\", # End date of the cube\n    edge_size=4000, # Edge size of the cube (px)\n    resolution=10, # Pixel size of the cube (m),\n    stac=paituli_stac_url\n)\nNow we have a datacube. As it is a dask array, the data is processed only after the graphs are created.\nda\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sentinel_2_monthly_index_mosaics_at_fmi' (time: 117,\n                                                             band: 1, y: 4000,\n                                                             x: 4000)&gt; Size: 15GB\ndask.array&lt;fetch_raster_window, shape=(117, 1, 4000, 4000), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray&gt;\nCoordinates: (12/13)\n  * time                       (time) datetime64[ns] 936B 2016-04-01 ... 2024...\n    id                         (time) &lt;U49 23kB 'Sentinel-2_indeksimosaiikki_...\n  * band                       (band) &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    start_datetime             (time) &lt;U29 14kB '2016-04-01T00:00:00.000+00:0...\n    ...                         ...\n    proj:code                  &lt;U9 36B 'EPSG:3067'\n    end_datetime               (time) &lt;U29 14kB '2016-04-30T23:59:59.000+00:0...\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04\nAttributes:\n    collection:           sentinel_2_monthly_index_mosaics_at_fmi\n    stac:                 https://paituli.csc.fi/geoserver/ogc/stac/v1\n    epsg:                 32635\n    resolution:           10\n    edge_size:            4000\n    central_lat:          69.42870189667391\n    central_lon:          25.911697105643754\n    central_y:            7702545.000115293\n    central_x:            457325.0000006164\n    time_coverage_start:  2016-04-01\n    time_coverage_end:    2025-05-31xarray.DataArray'sentinel_2_monthly_index_mosaics_at_fmi'time: 117band: 1y: 4000x: 4000dask.array&lt;chunksize=(1, 1, 1024, 1024), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n13.95 GiB\n8.00 MiB\n\n\nShape\n(117, 1, 4000, 4000)\n(1, 1, 1024, 1024)\n\n\nDask graph\n1872 chunks in 3 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                                        117 1                                      4000 4000 1\n\n\n\n\nCoordinates: (13)time(time)datetime64[ns]2016-04-01 ... 2024-10-01array(['2016-04-01T00:00:00.000000000', '2016-04-15T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2016-05-15T00:00:00.000000000',\n       '2016-06-01T00:00:00.000000000', '2016-06-15T00:00:00.000000000',\n       '2016-07-01T00:00:00.000000000', '2016-07-15T00:00:00.000000000',\n       '2016-08-01T00:00:00.000000000', '2016-08-15T00:00:00.000000000',\n       '2016-09-01T00:00:00.000000000', '2016-09-15T00:00:00.000000000',\n       '2016-10-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-04-15T00:00:00.000000000', '2017-05-01T00:00:00.000000000',\n       '2017-05-15T00:00:00.000000000', '2017-06-01T00:00:00.000000000',\n       '2017-06-15T00:00:00.000000000', '2017-07-01T00:00:00.000000000',\n       '2017-07-15T00:00:00.000000000', '2017-08-01T00:00:00.000000000',\n       '2017-08-15T00:00:00.000000000', '2017-09-01T00:00:00.000000000',\n       '2017-09-15T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2018-04-01T00:00:00.000000000', '2018-04-15T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2018-05-15T00:00:00.000000000',\n       '2018-06-01T00:00:00.000000000', '2018-06-15T00:00:00.000000000',\n       '2018-07-01T00:00:00.000000000', '2018-07-15T00:00:00.000000000',\n       '2018-08-01T00:00:00.000000000', '2018-08-15T00:00:00.000000000',\n       '2018-09-01T00:00:00.000000000', '2018-09-15T00:00:00.000000000',\n       '2018-10-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-04-15T00:00:00.000000000', '2019-05-01T00:00:00.000000000',\n       '2019-05-15T00:00:00.000000000', '2019-06-01T00:00:00.000000000',\n       '2019-06-15T00:00:00.000000000', '2019-07-01T00:00:00.000000000',\n       '2019-07-15T00:00:00.000000000', '2019-08-01T00:00:00.000000000',\n       '2019-08-15T00:00:00.000000000', '2019-09-01T00:00:00.000000000',\n       '2019-09-15T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2020-04-01T00:00:00.000000000', '2020-04-15T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2020-05-15T00:00:00.000000000',\n       '2020-06-01T00:00:00.000000000', '2020-06-15T00:00:00.000000000',\n       '2020-07-01T00:00:00.000000000', '2020-07-15T00:00:00.000000000',\n       '2020-08-01T00:00:00.000000000', '2020-08-15T00:00:00.000000000',\n       '2020-09-01T00:00:00.000000000', '2020-09-15T00:00:00.000000000',\n       '2020-10-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-04-15T00:00:00.000000000', '2021-05-01T00:00:00.000000000',\n       '2021-05-15T00:00:00.000000000', '2021-06-01T00:00:00.000000000',\n       '2021-06-15T00:00:00.000000000', '2021-07-01T00:00:00.000000000',\n       '2021-07-15T00:00:00.000000000', '2021-08-01T00:00:00.000000000',\n       '2021-08-15T00:00:00.000000000', '2021-09-01T00:00:00.000000000',\n       '2021-09-15T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2022-04-01T00:00:00.000000000', '2022-04-15T00:00:00.000000000',\n       '2022-05-01T00:00:00.000000000', '2022-05-15T00:00:00.000000000',\n       '2022-06-01T00:00:00.000000000', '2022-06-15T00:00:00.000000000',\n       '2022-07-01T00:00:00.000000000', '2022-07-15T00:00:00.000000000',\n       '2022-08-01T00:00:00.000000000', '2022-08-15T00:00:00.000000000',\n       '2022-09-01T00:00:00.000000000', '2022-09-15T00:00:00.000000000',\n       '2022-10-01T00:00:00.000000000', '2023-04-01T00:00:00.000000000',\n       '2023-04-15T00:00:00.000000000', '2023-05-01T00:00:00.000000000',\n       '2023-05-15T00:00:00.000000000', '2023-06-01T00:00:00.000000000',\n       '2023-06-15T00:00:00.000000000', '2023-07-01T00:00:00.000000000',\n       '2023-07-15T00:00:00.000000000', '2023-08-01T00:00:00.000000000',\n       '2023-08-15T00:00:00.000000000', '2023-09-01T00:00:00.000000000',\n       '2023-09-15T00:00:00.000000000', '2023-10-01T00:00:00.000000000',\n       '2024-04-01T00:00:00.000000000', '2024-04-15T00:00:00.000000000',\n       '2024-05-01T00:00:00.000000000', '2024-05-15T00:00:00.000000000',\n       '2024-06-01T00:00:00.000000000', '2024-06-15T00:00:00.000000000',\n       '2024-07-01T00:00:00.000000000', '2024-07-15T00:00:00.000000000',\n       '2024-08-01T00:00:00.000000000', '2024-08-15T00:00:00.000000000',\n       '2024-09-01T00:00:00.000000000', '2024-09-15T00:00:00.000000000',\n       '2024-10-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)&lt;U49'Sentinel-2_indeksimosaiikki_201...array(['Sentinel-2_indeksimosaiikki_2016-04-01_2016-04-30',\n       'Sentinel-2_indeksimosaiikki_2016-04-15_2016-05-15',\n       'Sentinel-2_indeksimosaiikki_2016-05-01_2016-05-31',\n       'Sentinel-2_indeksimosaiikki_2016-05-15_2016-06-15',\n       'Sentinel-2_indeksimosaiikki_2016-06-01_2016-06-30',\n       'Sentinel-2_indeksimosaiikki_2016-06-15_2016-07-15',\n       'Sentinel-2_indeksimosaiikki_2016-07-01_2016-07-31',\n       'Sentinel-2_indeksimosaiikki_2016-07-15_2016-08-15',\n       'Sentinel-2_indeksimosaiikki_2016-08-01_2016-08-31',\n       'Sentinel-2_indeksimosaiikki_2016-08-15_2016-09-15',\n       'Sentinel-2_indeksimosaiikki_2016-09-01_2016-09-30',\n       'Sentinel-2_indeksimosaiikki_2016-09-15_2016-10-15',\n       'Sentinel-2_indeksimosaiikki_2016-10-01_2016-10-31',\n       'Sentinel-2_indeksimosaiikki_2017-04-01_2017-04-30',\n       'Sentinel-2_indeksimosaiikki_2017-04-15_2017-05-15',\n       'Sentinel-2_indeksimosaiikki_2017-05-01_2017-05-31',\n       'Sentinel-2_indeksimosaiikki_2017-05-15_2017-06-15',\n       'Sentinel-2_indeksimosaiikki_2017-06-01_2017-06-30',\n       'Sentinel-2_indeksimosaiikki_2017-06-15_2017-07-15',\n       'Sentinel-2_indeksimosaiikki_2017-07-01_2017-07-31',\n...\n       'Sentinel-2_indeksimosaiikki_2023-07-01_2023-07-31',\n       'Sentinel-2_indeksimosaiikki_2023-07-15_2023-08-15',\n       'Sentinel-2_indeksimosaiikki_2023-08-01_2023-08-31',\n       'Sentinel-2_indeksimosaiikki_2023-08-15_2023-09-15',\n       'Sentinel-2_indeksimosaiikki_2023-09-01_2023-09-30',\n       'Sentinel-2_indeksimosaiikki_2023-09-15_2023-10-15',\n       'Sentinel-2_indeksimosaiikki_2023-10-01_2023-10-31',\n       'Sentinel-2_indeksimosaiikki_2024-04-01_2024-04-30',\n       'Sentinel-2_indeksimosaiikki_2024-04-15_2024-05-15',\n       'Sentinel-2_indeksimosaiikki_2024-05-01_2024-05-31',\n       'Sentinel-2_indeksimosaiikki_2024-05-15_2024-06-15',\n       'Sentinel-2_indeksimosaiikki_2024-06-01_2024-06-30',\n       'Sentinel-2_indeksimosaiikki_2024-06-15_2024-07-15',\n       'Sentinel-2_indeksimosaiikki_2024-07-01_2024-07-31',\n       'Sentinel-2_indeksimosaiikki_2024-07-15_2024-08-15',\n       'Sentinel-2_indeksimosaiikki_2024-08-01_2024-08-31',\n       'Sentinel-2_indeksimosaiikki_2024-08-15_2024-09-15',\n       'Sentinel-2_indeksimosaiikki_2024-09-01_2024-09-30',\n       'Sentinel-2_indeksimosaiikki_2024-09-15_2024-10-15',\n       'Sentinel-2_indeksimosaiikki_2024-10-01_2024-10-31'], dtype='&lt;U49')band(band)&lt;U4'ndvi'array(['ndvi'], dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])start_datetime(time)&lt;U29'2016-04-01T00:00:00.000+00:00' ...array(['2016-04-01T00:00:00.000+00:00', '2016-04-15T00:00:00.000+00:00',\n       '2016-05-01T00:00:00.000+00:00', '2016-05-15T00:00:00.000+00:00',\n       '2016-06-01T00:00:00.000+00:00', '2016-06-15T00:00:00.000+00:00',\n       '2016-07-01T00:00:00.000+00:00', '2016-07-15T00:00:00.000+00:00',\n       '2016-08-01T00:00:00.000+00:00', '2016-08-15T00:00:00.000+00:00',\n       '2016-09-01T00:00:00.000+00:00', '2016-09-15T00:00:00.000+00:00',\n       '2016-10-01T00:00:00.000+00:00', '2017-04-01T00:00:00.000+00:00',\n       '2017-04-15T00:00:00.000+00:00', '2017-05-01T00:00:00.000+00:00',\n       '2017-05-15T00:00:00.000+00:00', '2017-06-01T00:00:00.000+00:00',\n       '2017-06-15T00:00:00.000+00:00', '2017-07-01T00:00:00.000+00:00',\n       '2017-07-15T00:00:00.000+00:00', '2017-08-01T00:00:00.000+00:00',\n       '2017-08-15T00:00:00.000+00:00', '2017-09-01T00:00:00.000+00:00',\n       '2017-09-15T00:00:00.000+00:00', '2017-10-01T00:00:00.000+00:00',\n       '2018-04-01T00:00:00.000+00:00', '2018-04-15T00:00:00.000+00:00',\n       '2018-05-01T00:00:00.000+00:00', '2018-05-15T00:00:00.000+00:00',\n       '2018-06-01T00:00:00.000+00:00', '2018-06-15T00:00:00.000+00:00',\n       '2018-07-01T00:00:00.000+00:00', '2018-07-15T00:00:00.000+00:00',\n       '2018-08-01T00:00:00.000+00:00', '2018-08-15T00:00:00.000+00:00',\n       '2018-09-01T00:00:00.000+00:00', '2018-09-15T00:00:00.000+00:00',\n       '2018-10-01T00:00:00.000+00:00', '2019-04-01T00:00:00.000+00:00',\n...\n       '2022-04-01T00:00:00.000+00:00', '2022-04-15T00:00:00.000+00:00',\n       '2022-05-01T00:00:00.000+00:00', '2022-05-15T00:00:00.000+00:00',\n       '2022-06-01T00:00:00.000+00:00', '2022-06-15T00:00:00.000+00:00',\n       '2022-07-01T00:00:00.000+00:00', '2022-07-15T00:00:00.000+00:00',\n       '2022-08-01T00:00:00.000+00:00', '2022-08-15T00:00:00.000+00:00',\n       '2022-09-01T00:00:00.000+00:00', '2022-09-15T00:00:00.000+00:00',\n       '2022-10-01T00:00:00.000+00:00', '2023-04-01T00:00:00.000+00:00',\n       '2023-04-15T00:00:00.000+00:00', '2023-05-01T00:00:00.000+00:00',\n       '2023-05-15T00:00:00.000+00:00', '2023-06-01T00:00:00.000+00:00',\n       '2023-06-15T00:00:00.000+00:00', '2023-07-01T00:00:00.000+00:00',\n       '2023-07-15T00:00:00.000+00:00', '2023-08-01T00:00:00.000+00:00',\n       '2023-08-15T00:00:00.000+00:00', '2023-09-01T00:00:00.000+00:00',\n       '2023-09-15T00:00:00.000+00:00', '2023-10-01T00:00:00.000+00:00',\n       '2024-04-01T00:00:00.000+00:00', '2024-04-15T00:00:00.000+00:00',\n       '2024-05-01T00:00:00.000+00:00', '2024-05-15T00:00:00.000+00:00',\n       '2024-06-01T00:00:00.000+00:00', '2024-06-15T00:00:00.000+00:00',\n       '2024-07-01T00:00:00.000+00:00', '2024-07-15T00:00:00.000+00:00',\n       '2024-08-01T00:00:00.000+00:00', '2024-08-15T00:00:00.000+00:00',\n       '2024-09-01T00:00:00.000+00:00', '2024-09-15T00:00:00.000+00:00',\n       '2024-10-01T00:00:00.000+00:00'], dtype='&lt;U29')gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')end_datetime(time)&lt;U29'2016-04-30T23:59:59.000+00:00' ...array(['2016-04-30T23:59:59.000+00:00', '2016-05-15T23:59:59.000+00:00',\n       '2016-05-31T23:59:59.000+00:00', '2016-06-15T23:59:59.000+00:00',\n       '2016-06-30T23:59:59.000+00:00', '2016-07-15T23:59:59.000+00:00',\n       '2016-07-31T23:59:59.000+00:00', '2016-08-15T23:59:59.000+00:00',\n       '2016-08-31T23:59:59.000+00:00', '2016-09-15T23:59:59.000+00:00',\n       '2016-09-30T23:59:59.000+00:00', '2016-10-15T23:59:59.000+00:00',\n       '2016-10-31T23:59:59.000+00:00', '2017-04-30T23:59:59.000+00:00',\n       '2017-05-15T23:59:59.000+00:00', '2017-05-31T23:59:59.000+00:00',\n       '2017-06-15T23:59:59.000+00:00', '2017-06-30T23:59:59.000+00:00',\n       '2017-07-15T23:59:59.000+00:00', '2017-07-31T23:59:59.000+00:00',\n       '2017-08-15T23:59:59.000+00:00', '2017-08-31T23:59:59.000+00:00',\n       '2017-09-15T23:59:59.000+00:00', '2017-09-30T23:59:59.000+00:00',\n       '2017-10-15T23:59:59.000+00:00', '2017-10-31T23:59:59.000+00:00',\n       '2018-04-30T23:59:59.000+00:00', '2018-05-15T23:59:59.000+00:00',\n       '2018-05-31T23:59:59.000+00:00', '2018-06-15T23:59:59.000+00:00',\n       '2018-06-30T23:59:59.000+00:00', '2018-07-15T23:59:59.000+00:00',\n       '2018-07-31T23:59:59.000+00:00', '2018-08-15T23:59:59.000+00:00',\n       '2018-08-31T23:59:59.000+00:00', '2018-09-15T23:59:59.000+00:00',\n       '2018-09-30T23:59:59.000+00:00', '2018-10-15T23:59:59.000+00:00',\n       '2018-10-31T23:59:59.000+00:00', '2019-04-30T23:59:59.000+00:00',\n...\n       '2022-04-30T23:59:59.000+00:00', '2022-05-15T23:59:59.000+00:00',\n       '2022-05-31T23:59:59.000+00:00', '2022-06-15T23:59:59.000+00:00',\n       '2022-06-30T23:59:59.000+00:00', '2022-07-15T23:59:59.000+00:00',\n       '2022-07-31T23:59:59.000+00:00', '2022-08-15T23:59:59.000+00:00',\n       '2022-08-31T23:59:59.000+00:00', '2022-09-15T23:59:59.000+00:00',\n       '2022-09-30T23:59:59.000+00:00', '2022-10-15T23:59:59.000+00:00',\n       '2022-10-31T23:59:59.000+00:00', '2023-04-30T23:59:59.000+00:00',\n       '2023-05-15T23:59:59.000+00:00', '2023-05-31T23:59:59.000+00:00',\n       '2023-06-15T23:59:59.000+00:00', '2023-06-30T23:59:59.000+00:00',\n       '2023-07-15T23:59:59.000+00:00', '2023-07-31T23:59:59.000+00:00',\n       '2023-08-15T23:59:59.000+00:00', '2023-08-31T23:59:59.000+00:00',\n       '2023-09-15T23:59:59.000+00:00', '2023-09-30T23:59:59.000+00:00',\n       '2023-10-15T23:59:59.000+00:00', '2023-10-31T23:59:59.000+00:00',\n       '2024-04-30T23:59:59.000+00:00', '2024-05-15T23:59:59.000+00:00',\n       '2024-05-31T23:59:59.000+00:00', '2024-06-15T23:59:59.000+00:00',\n       '2024-06-30T23:59:59.000+00:00', '2024-07-15T23:59:59.000+00:00',\n       '2024-07-31T23:59:59.000+00:00', '2024-08-15T23:59:59.000+00:00',\n       '2024-08-31T23:59:59.000+00:00', '2024-09-15T23:59:59.000+00:00',\n       '2024-09-30T23:59:59.000+00:00', '2024-10-15T23:59:59.000+00:00',\n       '2024-10-31T23:59:59.000+00:00'], dtype='&lt;U29')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2016-04-01', '2016-04-15', '2016-05-01', '2016-05-15',\n               '2016-06-01', '2016-06-15', '2016-07-01', '2016-07-15',\n               '2016-08-01', '2016-08-15',\n               ...\n               '2024-05-15', '2024-06-01', '2024-06-15', '2024-07-01',\n               '2024-07-15', '2024-08-01', '2024-08-15', '2024-09-01',\n               '2024-09-15', '2024-10-01'],\n              dtype='datetime64[ns]', name='time', length=117, freq=None))bandPandasIndexPandasIndex(Index(['ndvi'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (11)collection :sentinel_2_monthly_index_mosaics_at_fmistac :https://paituli.csc.fi/geoserver/ogc/stac/v1epsg :32635resolution :10edge_size :4000central_lat :69.42870189667391central_lon :25.911697105643754central_y :7702545.000115293central_x :457325.0000006164time_coverage_start :2016-04-01time_coverage_end :2025-05-31"
  },
  {
    "objectID": "processing_flow_stac.html#create-base-mosaics-for-spring-and-autumn",
    "href": "processing_flow_stac.html#create-base-mosaics-for-spring-and-autumn",
    "title": "Gapless S2 index mosaics",
    "section": "Create base mosaics for spring and autumn",
    "text": "Create base mosaics for spring and autumn\nSeasonal base mosaics are used to fill gaps for April, May and October, as they are usually the most cloudy months. Base mosaics are constructed from the median values of April, May and October during the full observation period.\nFirst filter DataArrays based the timesteps for spring and autumn. Spring is April and May, autumn is mid-September to October.\n\ntime = da.indexes['time'].values \n\nyear = da.time.dt.year\nmonth = da.time.dt.month\nday = da.time.dt.day\n\nspring_mask = (month == 4) | ((month == 5) & (day == 1))\nautumn_mask = (month == 10) | ((month == 9) & ((day == 30) | (day == 15)))\n\nspring = da.sel(time=spring_mask)\nautumn = da.sel(time=autumn_mask)\n\n\nspring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sentinel_2_monthly_index_mosaics_at_fmi' (time: 27, band: 1,\n                                                             y: 4000, x: 4000)&gt; Size: 3GB\ndask.array&lt;getitem, shape=(27, 1, 4000, 4000), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray&gt;\nCoordinates: (12/13)\n  * time                       (time) datetime64[ns] 216B 2016-04-01 ... 2024...\n    id                         (time) &lt;U49 5kB 'Sentinel-2_indeksimosaiikki_2...\n  * band                       (band) &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    start_datetime             (time) &lt;U29 3kB '2016-04-01T00:00:00.000+00:00...\n    ...                         ...\n    proj:code                  &lt;U9 36B 'EPSG:3067'\n    end_datetime               (time) &lt;U29 3kB '2016-04-30T23:59:59.000+00:00...\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04\nAttributes:\n    collection:           sentinel_2_monthly_index_mosaics_at_fmi\n    stac:                 https://paituli.csc.fi/geoserver/ogc/stac/v1\n    epsg:                 32635\n    resolution:           10\n    edge_size:            4000\n    central_lat:          69.42870189667391\n    central_lon:          25.911697105643754\n    central_y:            7702545.000115293\n    central_x:            457325.0000006164\n    time_coverage_start:  2016-04-01\n    time_coverage_end:    2025-05-31xarray.DataArray'sentinel_2_monthly_index_mosaics_at_fmi'time: 27band: 1y: 4000x: 4000dask.array&lt;chunksize=(1, 1, 1024, 1024), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n3.22 GiB\n8.00 MiB\n\n\nShape\n(27, 1, 4000, 4000)\n(1, 1, 1024, 1024)\n\n\nDask graph\n432 chunks in 4 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                                   27 1                                      4000 4000 1\n\n\n\n\nCoordinates: (13)time(time)datetime64[ns]2016-04-01 ... 2024-05-01array(['2016-04-01T00:00:00.000000000', '2016-04-15T00:00:00.000000000',\n       '2016-05-01T00:00:00.000000000', '2017-04-01T00:00:00.000000000',\n       '2017-04-15T00:00:00.000000000', '2017-05-01T00:00:00.000000000',\n       '2018-04-01T00:00:00.000000000', '2018-04-15T00:00:00.000000000',\n       '2018-05-01T00:00:00.000000000', '2019-04-01T00:00:00.000000000',\n       '2019-04-15T00:00:00.000000000', '2019-05-01T00:00:00.000000000',\n       '2020-04-01T00:00:00.000000000', '2020-04-15T00:00:00.000000000',\n       '2020-05-01T00:00:00.000000000', '2021-04-01T00:00:00.000000000',\n       '2021-04-15T00:00:00.000000000', '2021-05-01T00:00:00.000000000',\n       '2022-04-01T00:00:00.000000000', '2022-04-15T00:00:00.000000000',\n       '2022-05-01T00:00:00.000000000', '2023-04-01T00:00:00.000000000',\n       '2023-04-15T00:00:00.000000000', '2023-05-01T00:00:00.000000000',\n       '2024-04-01T00:00:00.000000000', '2024-04-15T00:00:00.000000000',\n       '2024-05-01T00:00:00.000000000'], dtype='datetime64[ns]')id(time)&lt;U49'Sentinel-2_indeksimosaiikki_201...array(['Sentinel-2_indeksimosaiikki_2016-04-01_2016-04-30',\n       'Sentinel-2_indeksimosaiikki_2016-04-15_2016-05-15',\n       'Sentinel-2_indeksimosaiikki_2016-05-01_2016-05-31',\n       'Sentinel-2_indeksimosaiikki_2017-04-01_2017-04-30',\n       'Sentinel-2_indeksimosaiikki_2017-04-15_2017-05-15',\n       'Sentinel-2_indeksimosaiikki_2017-05-01_2017-05-31',\n       'Sentinel-2_indeksimosaiikki_2018-04-01_2018-04-30',\n       'Sentinel-2_indeksimosaiikki_2018-04-15_2018-05-15',\n       'Sentinel-2_indeksimosaiikki_2018-05-01_2018-05-31',\n       'Sentinel-2_indeksimosaiikki_2019-04-01_2019-04-30',\n       'Sentinel-2_indeksimosaiikki_2019-04-15_2019-05-15',\n       'Sentinel-2_indeksimosaiikki_2019-05-01_2019-05-31',\n       'Sentinel-2_indeksimosaiikki_2020-04-01_2020-04-30',\n       'Sentinel-2_indeksimosaiikki_2020-04-15_2020-05-15',\n       'Sentinel-2_indeksimosaiikki_2020-05-01_2020-05-31',\n       'Sentinel-2_indeksimosaiikki_2021-04-01_2021-04-30',\n       'Sentinel-2_indeksimosaiikki_2021-04-15_2021-05-15',\n       'Sentinel-2_indeksimosaiikki_2021-05-01_2021-05-31',\n       'Sentinel-2_indeksimosaiikki_2022-04-01_2022-04-30',\n       'Sentinel-2_indeksimosaiikki_2022-04-15_2022-05-15',\n       'Sentinel-2_indeksimosaiikki_2022-05-01_2022-05-31',\n       'Sentinel-2_indeksimosaiikki_2023-04-01_2023-04-30',\n       'Sentinel-2_indeksimosaiikki_2023-04-15_2023-05-15',\n       'Sentinel-2_indeksimosaiikki_2023-05-01_2023-05-31',\n       'Sentinel-2_indeksimosaiikki_2024-04-01_2024-04-30',\n       'Sentinel-2_indeksimosaiikki_2024-04-15_2024-05-15',\n       'Sentinel-2_indeksimosaiikki_2024-05-01_2024-05-31'], dtype='&lt;U49')band(band)&lt;U4'ndvi'array(['ndvi'], dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])start_datetime(time)&lt;U29'2016-04-01T00:00:00.000+00:00' ...array(['2016-04-01T00:00:00.000+00:00', '2016-04-15T00:00:00.000+00:00',\n       '2016-05-01T00:00:00.000+00:00', '2017-04-01T00:00:00.000+00:00',\n       '2017-04-15T00:00:00.000+00:00', '2017-05-01T00:00:00.000+00:00',\n       '2018-04-01T00:00:00.000+00:00', '2018-04-15T00:00:00.000+00:00',\n       '2018-05-01T00:00:00.000+00:00', '2019-04-01T00:00:00.000+00:00',\n       '2019-04-15T00:00:00.000+00:00', '2019-05-01T00:00:00.000+00:00',\n       '2020-04-01T00:00:00.000+00:00', '2020-04-15T00:00:00.000+00:00',\n       '2020-05-01T00:00:00.000+00:00', '2021-04-01T00:00:00.000+00:00',\n       '2021-04-15T00:00:00.000+00:00', '2021-05-01T00:00:00.000+00:00',\n       '2022-04-01T00:00:00.000+00:00', '2022-04-15T00:00:00.000+00:00',\n       '2022-05-01T00:00:00.000+00:00', '2023-04-01T00:00:00.000+00:00',\n       '2023-04-15T00:00:00.000+00:00', '2023-05-01T00:00:00.000+00:00',\n       '2024-04-01T00:00:00.000+00:00', '2024-04-15T00:00:00.000+00:00',\n       '2024-05-01T00:00:00.000+00:00'], dtype='&lt;U29')gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')end_datetime(time)&lt;U29'2016-04-30T23:59:59.000+00:00' ...array(['2016-04-30T23:59:59.000+00:00', '2016-05-15T23:59:59.000+00:00',\n       '2016-05-31T23:59:59.000+00:00', '2017-04-30T23:59:59.000+00:00',\n       '2017-05-15T23:59:59.000+00:00', '2017-05-31T23:59:59.000+00:00',\n       '2018-04-30T23:59:59.000+00:00', '2018-05-15T23:59:59.000+00:00',\n       '2018-05-31T23:59:59.000+00:00', '2019-04-30T23:59:59.000+00:00',\n       '2019-05-15T23:59:59.000+00:00', '2019-05-31T23:59:59.000+00:00',\n       '2020-04-30T23:59:59.000+00:00', '2020-05-15T23:59:59.000+00:00',\n       '2020-05-31T23:59:59.000+00:00', '2021-04-30T23:59:59.000+00:00',\n       '2021-05-15T23:59:59.000+00:00', '2021-05-31T23:59:59.000+00:00',\n       '2022-04-30T23:59:59.000+00:00', '2022-05-15T23:59:59.000+00:00',\n       '2022-05-31T23:59:59.000+00:00', '2023-04-30T23:59:59.000+00:00',\n       '2023-05-15T23:59:59.000+00:00', '2023-05-31T23:59:59.000+00:00',\n       '2024-04-30T23:59:59.000+00:00', '2024-05-15T23:59:59.000+00:00',\n       '2024-05-31T23:59:59.000+00:00'], dtype='&lt;U29')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2016-04-01', '2016-04-15', '2016-05-01', '2017-04-01',\n               '2017-04-15', '2017-05-01', '2018-04-01', '2018-04-15',\n               '2018-05-01', '2019-04-01', '2019-04-15', '2019-05-01',\n               '2020-04-01', '2020-04-15', '2020-05-01', '2021-04-01',\n               '2021-04-15', '2021-05-01', '2022-04-01', '2022-04-15',\n               '2022-05-01', '2023-04-01', '2023-04-15', '2023-05-01',\n               '2024-04-01', '2024-04-15', '2024-05-01'],\n              dtype='datetime64[ns]', name='time', freq=None))bandPandasIndexPandasIndex(Index(['ndvi'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (11)collection :sentinel_2_monthly_index_mosaics_at_fmistac :https://paituli.csc.fi/geoserver/ogc/stac/v1epsg :32635resolution :10edge_size :4000central_lat :69.42870189667391central_lon :25.911697105643754central_y :7702545.000115293central_x :457325.0000006164time_coverage_start :2016-04-01time_coverage_end :2025-05-31\n\n\n\nautumn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sentinel_2_monthly_index_mosaics_at_fmi' (time: 18, band: 1,\n                                                             y: 4000, x: 4000)&gt; Size: 2GB\ndask.array&lt;getitem, shape=(18, 1, 4000, 4000), dtype=float64, chunksize=(1, 1, 1024, 1024), chunktype=numpy.ndarray&gt;\nCoordinates: (12/13)\n  * time                       (time) datetime64[ns] 144B 2016-09-15 ... 2024...\n    id                         (time) &lt;U49 4kB 'Sentinel-2_indeksimosaiikki_2...\n  * band                       (band) &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    start_datetime             (time) &lt;U29 2kB '2016-09-15T00:00:00.000+00:00...\n    ...                         ...\n    proj:code                  &lt;U9 36B 'EPSG:3067'\n    end_datetime               (time) &lt;U29 2kB '2016-10-15T23:59:59.000+00:00...\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04\nAttributes:\n    collection:           sentinel_2_monthly_index_mosaics_at_fmi\n    stac:                 https://paituli.csc.fi/geoserver/ogc/stac/v1\n    epsg:                 32635\n    resolution:           10\n    edge_size:            4000\n    central_lat:          69.42870189667391\n    central_lon:          25.911697105643754\n    central_y:            7702545.000115293\n    central_x:            457325.0000006164\n    time_coverage_start:  2016-04-01\n    time_coverage_end:    2025-05-31xarray.DataArray'sentinel_2_monthly_index_mosaics_at_fmi'time: 18band: 1y: 4000x: 4000dask.array&lt;chunksize=(1, 1, 1024, 1024), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.15 GiB\n8.00 MiB\n\n\nShape\n(18, 1, 4000, 4000)\n(1, 1, 1024, 1024)\n\n\nDask graph\n288 chunks in 4 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                          18 1                                      4000 4000 1\n\n\n\n\nCoordinates: (13)time(time)datetime64[ns]2016-09-15 ... 2024-10-01array(['2016-09-15T00:00:00.000000000', '2016-10-01T00:00:00.000000000',\n       '2017-09-15T00:00:00.000000000', '2017-10-01T00:00:00.000000000',\n       '2018-09-15T00:00:00.000000000', '2018-10-01T00:00:00.000000000',\n       '2019-09-15T00:00:00.000000000', '2019-10-01T00:00:00.000000000',\n       '2020-09-15T00:00:00.000000000', '2020-10-01T00:00:00.000000000',\n       '2021-09-15T00:00:00.000000000', '2021-10-01T00:00:00.000000000',\n       '2022-09-15T00:00:00.000000000', '2022-10-01T00:00:00.000000000',\n       '2023-09-15T00:00:00.000000000', '2023-10-01T00:00:00.000000000',\n       '2024-09-15T00:00:00.000000000', '2024-10-01T00:00:00.000000000'],\n      dtype='datetime64[ns]')id(time)&lt;U49'Sentinel-2_indeksimosaiikki_201...array(['Sentinel-2_indeksimosaiikki_2016-09-15_2016-10-15',\n       'Sentinel-2_indeksimosaiikki_2016-10-01_2016-10-31',\n       'Sentinel-2_indeksimosaiikki_2017-09-15_2017-10-15',\n       'Sentinel-2_indeksimosaiikki_2017-10-01_2017-10-31',\n       'Sentinel-2_indeksimosaiikki_2018-09-15_2018-10-15',\n       'Sentinel-2_indeksimosaiikki_2018-10-01_2018-10-31',\n       'Sentinel-2_indeksimosaiikki_2019-09-15_2019-10-15',\n       'Sentinel-2_indeksimosaiikki_2019-10-01_2019-10-31',\n       'Sentinel-2_indeksimosaiikki_2020-09-15_2020-10-15',\n       'Sentinel-2_indeksimosaiikki_2020-10-01_2020-10-31',\n       'Sentinel-2_indeksimosaiikki_2021-09-15_2021-10-15',\n       'Sentinel-2_indeksimosaiikki_2021-10-01_2021-10-31',\n       'Sentinel-2_indeksimosaiikki_2022-09-15_2022-10-15',\n       'Sentinel-2_indeksimosaiikki_2022-10-01_2022-10-31',\n       'Sentinel-2_indeksimosaiikki_2023-09-15_2023-10-15',\n       'Sentinel-2_indeksimosaiikki_2023-10-01_2023-10-31',\n       'Sentinel-2_indeksimosaiikki_2024-09-15_2024-10-15',\n       'Sentinel-2_indeksimosaiikki_2024-10-01_2024-10-31'], dtype='&lt;U49')band(band)&lt;U4'ndvi'array(['ndvi'], dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])start_datetime(time)&lt;U29'2016-09-15T00:00:00.000+00:00' ...array(['2016-09-15T00:00:00.000+00:00', '2016-10-01T00:00:00.000+00:00',\n       '2017-09-15T00:00:00.000+00:00', '2017-10-01T00:00:00.000+00:00',\n       '2018-09-15T00:00:00.000+00:00', '2018-10-01T00:00:00.000+00:00',\n       '2019-09-15T00:00:00.000+00:00', '2019-10-01T00:00:00.000+00:00',\n       '2020-09-15T00:00:00.000+00:00', '2020-10-01T00:00:00.000+00:00',\n       '2021-09-15T00:00:00.000+00:00', '2021-10-01T00:00:00.000+00:00',\n       '2022-09-15T00:00:00.000+00:00', '2022-10-01T00:00:00.000+00:00',\n       '2023-09-15T00:00:00.000+00:00', '2023-10-01T00:00:00.000+00:00',\n       '2024-09-15T00:00:00.000+00:00', '2024-10-01T00:00:00.000+00:00'],\n      dtype='&lt;U29')gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')end_datetime(time)&lt;U29'2016-10-15T23:59:59.000+00:00' ...array(['2016-10-15T23:59:59.000+00:00', '2016-10-31T23:59:59.000+00:00',\n       '2017-10-15T23:59:59.000+00:00', '2017-10-31T23:59:59.000+00:00',\n       '2018-10-15T23:59:59.000+00:00', '2018-10-31T23:59:59.000+00:00',\n       '2019-10-15T23:59:59.000+00:00', '2019-10-31T23:59:59.000+00:00',\n       '2020-10-15T23:59:59.000+00:00', '2020-10-31T23:59:59.000+00:00',\n       '2021-10-15T23:59:59.000+00:00', '2021-10-31T23:59:59.000+00:00',\n       '2022-10-15T23:59:59.000+00:00', '2022-10-31T23:59:59.000+00:00',\n       '2023-10-15T23:59:59.000+00:00', '2023-10-31T23:59:59.000+00:00',\n       '2024-10-15T23:59:59.000+00:00', '2024-10-31T23:59:59.000+00:00'],\n      dtype='&lt;U29')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])Indexes: (4)timePandasIndexPandasIndex(DatetimeIndex(['2016-09-15', '2016-10-01', '2017-09-15', '2017-10-01',\n               '2018-09-15', '2018-10-01', '2019-09-15', '2019-10-01',\n               '2020-09-15', '2020-10-01', '2021-09-15', '2021-10-01',\n               '2022-09-15', '2022-10-01', '2023-09-15', '2023-10-01',\n               '2024-09-15', '2024-10-01'],\n              dtype='datetime64[ns]', name='time', freq=None))bandPandasIndexPandasIndex(Index(['ndvi'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (11)collection :sentinel_2_monthly_index_mosaics_at_fmistac :https://paituli.csc.fi/geoserver/ogc/stac/v1epsg :32635resolution :10edge_size :4000central_lat :69.42870189667391central_lon :25.911697105643754central_y :7702545.000115293central_x :457325.0000006164time_coverage_start :2016-04-01time_coverage_end :2025-05-31\n\n\nBase mosaics are median values for these timesteps.\n\nbase_spring = spring.sel(band='ndvi').median(dim='time', skipna=True)\nbase_autumn = autumn.sel(band='ndvi').median(dim='time', skipna=True)\n\n\nbase_spring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sentinel_2_monthly_index_mosaics_at_fmi' (y: 4000, x: 4000)&gt; Size: 128MB\ndask.array&lt;nanmedian, shape=(4000, 4000), dtype=float64, chunksize=(788, 788), chunktype=numpy.ndarray&gt;\nCoordinates:\n    band                       &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    gsd                        float64 8B 10.0\n    proj:code                  &lt;U9 36B 'EPSG:3067'\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04xarray.DataArray'sentinel_2_monthly_index_mosaics_at_fmi'y: 4000x: 4000dask.array&lt;chunksize=(788, 788), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n122.07 MiB\n4.74 MiB\n\n\nShape\n(4000, 4000)\n(788, 788)\n\n\nDask graph\n36 chunks in 8 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                   4000 4000\n\n\n\n\nCoordinates: (9)band()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])Indexes: (2)xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (0)\n\n\n\nbase_spring.rio.write_crs('EPSG:3067', inplace=True)\n#base_spring.astype(np.uint8).rio.to_raster('stac_data/spring_base.tif') # Uncomment to save the file\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sentinel_2_monthly_index_mosaics_at_fmi' (y: 4000, x: 4000)&gt; Size: 128MB\ndask.array&lt;nanmedian, shape=(4000, 4000), dtype=float64, chunksize=(788, 788), chunktype=numpy.ndarray&gt;\nCoordinates:\n    band                       &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    gsd                        float64 8B 10.0\n    proj:code                  &lt;U9 36B 'EPSG:3067'\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04\n    spatial_ref                int64 8B 0xarray.DataArray'sentinel_2_monthly_index_mosaics_at_fmi'y: 4000x: 4000dask.array&lt;chunksize=(788, 788), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n122.07 MiB\n4.74 MiB\n\n\nShape\n(4000, 4000)\n(788, 788)\n\n\nDask graph\n36 chunks in 8 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                   4000 4000\n\n\n\n\nCoordinates: (10)band()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])spatial_ref()int640crs_wkt :PROJCS[\"EUREF-FIN / TM35FIN(E,N)\",GEOGCS[\"EUREF-FIN\",DATUM[\"EUREF-FIN\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"1391\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"10690\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"3067\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314140356inverse_flattening :298.257222101reference_ellipsoid_name :GRS 1980longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :EUREF-FINhorizontal_datum_name :EUREF-FINprojected_crs_name :EUREF-FIN / TM35FIN(E,N)grid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :27.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"EUREF-FIN / TM35FIN(E,N)\",GEOGCS[\"EUREF-FIN\",DATUM[\"EUREF-FIN\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"1391\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"10690\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"3067\"]]array(0)Indexes: (2)xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (0)\n\n\n\nbase_autumn.rio.write_crs('EPSG:3067', inplace=True)\n#base_autumn.astype(np.uint8).rio.to_raster('stac_data/autumn_base.tif')  # Uncomment to save the file\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'sentinel_2_monthly_index_mosaics_at_fmi' (y: 4000, x: 4000)&gt; Size: 128MB\ndask.array&lt;nanmedian, shape=(4000, 4000), dtype=float64, chunksize=(965, 965), chunktype=numpy.ndarray&gt;\nCoordinates:\n    band                       &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    gsd                        float64 8B 10.0\n    proj:code                  &lt;U9 36B 'EPSG:3067'\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04\n    spatial_ref                int64 8B 0xarray.DataArray'sentinel_2_monthly_index_mosaics_at_fmi'y: 4000x: 4000dask.array&lt;chunksize=(965, 965), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n122.07 MiB\n7.10 MiB\n\n\nShape\n(4000, 4000)\n(965, 965)\n\n\nDask graph\n25 chunks in 7 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                 4000 4000\n\n\n\n\nCoordinates: (10)band()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])spatial_ref()int640crs_wkt :PROJCS[\"EUREF-FIN / TM35FIN(E,N)\",GEOGCS[\"EUREF-FIN\",DATUM[\"EUREF-FIN\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"1391\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"10690\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"3067\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314140356inverse_flattening :298.257222101reference_ellipsoid_name :GRS 1980longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :EUREF-FINhorizontal_datum_name :EUREF-FINprojected_crs_name :EUREF-FIN / TM35FIN(E,N)grid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :27.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"EUREF-FIN / TM35FIN(E,N)\",GEOGCS[\"EUREF-FIN\",DATUM[\"EUREF-FIN\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"1391\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"10690\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"3067\"]]array(0)Indexes: (2)xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (0)"
  },
  {
    "objectID": "processing_flow_stac.html#fill-gaps-with-the-maximum-value-of-previous-two-years",
    "href": "processing_flow_stac.html#fill-gaps-with-the-maximum-value-of-previous-two-years",
    "title": "Gapless S2 index mosaics",
    "section": "Fill gaps with the maximum value of previous two years",
    "text": "Fill gaps with the maximum value of previous two years\nUse the data from full months, i.e. between the first and the last day.\nAs this step needs two previous years of data, the earliest year that can be processed from Sentinel-2 data is 2018.\n\nda = da.sel(time=da.time.dt.day==1)\n\nReshape to year, month indexable DataArray.\n\nda = da.assign_coords(year=da.time.dt.year, month=da.time.dt.month)\nda = da.set_index(time=['year', 'month']).unstack('time')\n\nCreate a DataArray for filled data.\n\nda_filled = da.copy()\n\n\nda_y1 = da.shift(year=1)\nda_y2 = da.shift(year=2)\nprev_max = xr.concat([da_y1, da_y2], dim='source').max(dim='source', skipna=True)\nda_filled = xr.where(da_filled.notnull(), da_filled, prev_max)"
  },
  {
    "objectID": "processing_flow_stac.html#fill-april-and-may-with-spring-mosaic",
    "href": "processing_flow_stac.html#fill-april-and-may-with-spring-mosaic",
    "title": "Gapless S2 index mosaics",
    "section": "Fill April and May with spring mosaic",
    "text": "Fill April and May with spring mosaic\n\nspring_msk = da_filled.month.isin([4,5])\n\nda_filled = xr.where(da_filled.notnull() | spring_msk, da_filled, base_spring)"
  },
  {
    "objectID": "processing_flow_stac.html#fill-october-with-autumn-mosaic",
    "href": "processing_flow_stac.html#fill-october-with-autumn-mosaic",
    "title": "Gapless S2 index mosaics",
    "section": "Fill October with autumn mosaic",
    "text": "Fill October with autumn mosaic\n\naut_msk = da_filled.month == 10\nda_filled = xr.where(da_filled.notnull() | aut_msk, da_filled, base_autumn)"
  },
  {
    "objectID": "processing_flow_stac.html#fill-growth-season-months-with-mean-values-of-previous-and-next-month-of-the-same-year",
    "href": "processing_flow_stac.html#fill-growth-season-months-with-mean-values-of-previous-and-next-month-of-the-same-year",
    "title": "Gapless S2 index mosaics",
    "section": "Fill growth season months with mean values of previous and next month of the same year",
    "text": "Fill growth season months with mean values of previous and next month of the same year\nThere are some areas where growth season has gaps, and they are filled with the mean values of the two adjacent months.\n\nda_m1 = da_filled.shift(month=1)\nda_m2 = da_filled.shift(month=-1)\nmonthmeans = xr.concat([da_m1, da_m2], dim='source').mean(dim='source', skipna=True)\n\ngr_mask = da_filled.month.isin([6,7,8])\n\nda_filled = xr.where(da_filled.notnull() | gr_mask, da_filled, monthmeans)\n\n\nda_filled = da_filled.sel(year=da_filled.year &gt;= 2018)\nda_filled.rio.write_crs('EPSG:3067', inplace=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 4000, x: 4000, year: 7, month: 7)&gt; Size: 6GB\ndask.array&lt;getitem, shape=(1, 4000, 4000, 7, 7), dtype=float64, chunksize=(1, 788, 788, 1, 1), chunktype=numpy.ndarray&gt;\nCoordinates: (12/15)\n  * year                       (year) int64 56B 2018 2019 2020 ... 2023 2024\n  * month                      (month) int64 56B 4 5 6 7 8 9 10\n    id                         (year, month) &lt;U49 10kB 'Sentinel-2_indeksimos...\n  * band                       (band) &lt;U4 16B 'ndvi'\n  * x                          (x) float64 32kB 4.373e+05 ... 4.773e+05\n  * y                          (y) float64 32kB 7.723e+06 ... 7.683e+06\n    ...                         ...\n    end_datetime               (year, month) &lt;U29 6kB '2018-04-30T23:59:59.00...\n    proj:transform             object 8B {0, 1, 7800000, 10, 50000, -10}\n    title                      &lt;U4 16B 'ndvi'\n    epsg                       int64 8B 32635\n    cubo:distance_from_center  (y, x) float64 128MB 2.828e+04 ... 2.827e+04\n    spatial_ref                int64 8B 0xarray.DataArrayband: 1y: 4000x: 4000year: 7month: 7dask.array&lt;chunksize=(1, 788, 788, 1, 1), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n5.84 GiB\n4.74 MiB\n\n\nShape\n(1, 4000, 4000, 7, 7)\n(1, 788, 788, 1, 1)\n\n\nDask graph\n8281 chunks in 67 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n                     4000 1                                                                          7 7 4000\n\n\n\n\nCoordinates: (15)year(year)int642018 2019 2020 2021 2022 2023 2024array([2018, 2019, 2020, 2021, 2022, 2023, 2024])month(month)int644 5 6 7 8 9 10array([ 4,  5,  6,  7,  8,  9, 10])id(year, month)&lt;U49'Sentinel-2_indeksimosaiikki_201...array([['Sentinel-2_indeksimosaiikki_2018-04-01_2018-04-30',\n        'Sentinel-2_indeksimosaiikki_2018-05-01_2018-05-31',\n        'Sentinel-2_indeksimosaiikki_2018-06-01_2018-06-30',\n        'Sentinel-2_indeksimosaiikki_2018-07-01_2018-07-31',\n        'Sentinel-2_indeksimosaiikki_2018-08-01_2018-08-31',\n        'Sentinel-2_indeksimosaiikki_2018-09-01_2018-09-30',\n        'Sentinel-2_indeksimosaiikki_2018-10-01_2018-10-31'],\n       ['Sentinel-2_indeksimosaiikki_2019-04-01_2019-04-30',\n        'Sentinel-2_indeksimosaiikki_2019-05-01_2019-05-31',\n        'Sentinel-2_indeksimosaiikki_2019-06-01_2019-06-30',\n        'Sentinel-2_indeksimosaiikki_2019-07-01_2019-07-31',\n        'Sentinel-2_indeksimosaiikki_2019-08-01_2019-08-31',\n        'Sentinel-2_indeksimosaiikki_2019-09-01_2019-09-30',\n        'Sentinel-2_indeksimosaiikki_2019-10-01_2019-10-31'],\n       ['Sentinel-2_indeksimosaiikki_2020-04-01_2020-04-30',\n        'Sentinel-2_indeksimosaiikki_2020-05-01_2020-05-31',\n        'Sentinel-2_indeksimosaiikki_2020-06-01_2020-06-30',\n        'Sentinel-2_indeksimosaiikki_2020-07-01_2020-07-31',\n        'Sentinel-2_indeksimosaiikki_2020-08-01_2020-08-31',\n        'Sentinel-2_indeksimosaiikki_2020-09-01_2020-09-30',\n...\n        'Sentinel-2_indeksimosaiikki_2022-06-01_2022-06-30',\n        'Sentinel-2_indeksimosaiikki_2022-07-01_2022-07-31',\n        'Sentinel-2_indeksimosaiikki_2022-08-01_2022-08-31',\n        'Sentinel-2_indeksimosaiikki_2022-09-01_2022-09-30',\n        'Sentinel-2_indeksimosaiikki_2022-10-01_2022-10-31'],\n       ['Sentinel-2_indeksimosaiikki_2023-04-01_2023-04-30',\n        'Sentinel-2_indeksimosaiikki_2023-05-01_2023-05-31',\n        'Sentinel-2_indeksimosaiikki_2023-06-01_2023-06-30',\n        'Sentinel-2_indeksimosaiikki_2023-07-01_2023-07-31',\n        'Sentinel-2_indeksimosaiikki_2023-08-01_2023-08-31',\n        'Sentinel-2_indeksimosaiikki_2023-09-01_2023-09-30',\n        'Sentinel-2_indeksimosaiikki_2023-10-01_2023-10-31'],\n       ['Sentinel-2_indeksimosaiikki_2024-04-01_2024-04-30',\n        'Sentinel-2_indeksimosaiikki_2024-05-01_2024-05-31',\n        'Sentinel-2_indeksimosaiikki_2024-06-01_2024-06-30',\n        'Sentinel-2_indeksimosaiikki_2024-07-01_2024-07-31',\n        'Sentinel-2_indeksimosaiikki_2024-08-01_2024-08-31',\n        'Sentinel-2_indeksimosaiikki_2024-09-01_2024-09-30',\n        'Sentinel-2_indeksimosaiikki_2024-10-01_2024-10-31']],\n      dtype='&lt;U49')band(band)&lt;U4'ndvi'array(['ndvi'], dtype='&lt;U4')x(x)float644.373e+05 4.373e+05 ... 4.773e+05array([437330., 437340., 437350., ..., 477300., 477310., 477320.])y(y)float647.723e+06 7.723e+06 ... 7.683e+06array([7722550., 7722540., 7722530., ..., 7682580., 7682570., 7682560.])start_datetime(year, month)&lt;U29'2018-04-01T00:00:00.000+00:00' ...array([['2018-04-01T00:00:00.000+00:00', '2018-05-01T00:00:00.000+00:00',\n        '2018-06-01T00:00:00.000+00:00', '2018-07-01T00:00:00.000+00:00',\n        '2018-08-01T00:00:00.000+00:00', '2018-09-01T00:00:00.000+00:00',\n        '2018-10-01T00:00:00.000+00:00'],\n       ['2019-04-01T00:00:00.000+00:00', '2019-05-01T00:00:00.000+00:00',\n        '2019-06-01T00:00:00.000+00:00', '2019-07-01T00:00:00.000+00:00',\n        '2019-08-01T00:00:00.000+00:00', '2019-09-01T00:00:00.000+00:00',\n        '2019-10-01T00:00:00.000+00:00'],\n       ['2020-04-01T00:00:00.000+00:00', '2020-05-01T00:00:00.000+00:00',\n        '2020-06-01T00:00:00.000+00:00', '2020-07-01T00:00:00.000+00:00',\n        '2020-08-01T00:00:00.000+00:00', '2020-09-01T00:00:00.000+00:00',\n        '2020-10-01T00:00:00.000+00:00'],\n       ['2021-04-01T00:00:00.000+00:00', '2021-05-01T00:00:00.000+00:00',\n        '2021-06-01T00:00:00.000+00:00', '2021-07-01T00:00:00.000+00:00',\n        '2021-08-01T00:00:00.000+00:00', '2021-09-01T00:00:00.000+00:00',\n        '2021-10-01T00:00:00.000+00:00'],\n       ['2022-04-01T00:00:00.000+00:00', '2022-05-01T00:00:00.000+00:00',\n        '2022-06-01T00:00:00.000+00:00', '2022-07-01T00:00:00.000+00:00',\n        '2022-08-01T00:00:00.000+00:00', '2022-09-01T00:00:00.000+00:00',\n        '2022-10-01T00:00:00.000+00:00'],\n       ['2023-04-01T00:00:00.000+00:00', '2023-05-01T00:00:00.000+00:00',\n        '2023-06-01T00:00:00.000+00:00', '2023-07-01T00:00:00.000+00:00',\n        '2023-08-01T00:00:00.000+00:00', '2023-09-01T00:00:00.000+00:00',\n        '2023-10-01T00:00:00.000+00:00'],\n       ['2024-04-01T00:00:00.000+00:00', '2024-05-01T00:00:00.000+00:00',\n        '2024-06-01T00:00:00.000+00:00', '2024-07-01T00:00:00.000+00:00',\n        '2024-08-01T00:00:00.000+00:00', '2024-09-01T00:00:00.000+00:00',\n        '2024-10-01T00:00:00.000+00:00']], dtype='&lt;U29')gsd()float6410.0array(10.)proj:code()&lt;U9'EPSG:3067'array('EPSG:3067', dtype='&lt;U9')end_datetime(year, month)&lt;U29'2018-04-30T23:59:59.000+00:00' ...array([['2018-04-30T23:59:59.000+00:00', '2018-05-31T23:59:59.000+00:00',\n        '2018-06-30T23:59:59.000+00:00', '2018-07-31T23:59:59.000+00:00',\n        '2018-08-31T23:59:59.000+00:00', '2018-09-30T23:59:59.000+00:00',\n        '2018-10-31T23:59:59.000+00:00'],\n       ['2019-04-30T23:59:59.000+00:00', '2019-05-31T23:59:59.000+00:00',\n        '2019-06-30T23:59:59.000+00:00', '2019-07-31T23:59:59.000+00:00',\n        '2019-08-31T23:59:59.000+00:00', '2019-09-30T23:59:59.000+00:00',\n        '2019-10-31T23:59:59.000+00:00'],\n       ['2020-04-30T23:59:59.000+00:00', '2020-05-31T23:59:59.000+00:00',\n        '2020-06-30T23:59:59.000+00:00', '2020-07-31T23:59:59.000+00:00',\n        '2020-08-31T23:59:59.000+00:00', '2020-09-30T23:59:59.000+00:00',\n        '2020-10-31T23:59:59.000+00:00'],\n       ['2021-04-30T23:59:59.000+00:00', '2021-05-31T23:59:59.000+00:00',\n        '2021-06-30T23:59:59.000+00:00', '2021-07-31T23:59:59.000+00:00',\n        '2021-08-31T23:59:59.000+00:00', '2021-09-30T23:59:59.000+00:00',\n        '2021-10-31T23:59:59.000+00:00'],\n       ['2022-04-30T23:59:59.000+00:00', '2022-05-31T23:59:59.000+00:00',\n        '2022-06-30T23:59:59.000+00:00', '2022-07-31T23:59:59.000+00:00',\n        '2022-08-31T23:59:59.000+00:00', '2022-09-30T23:59:59.000+00:00',\n        '2022-10-31T23:59:59.000+00:00'],\n       ['2023-04-30T23:59:59.000+00:00', '2023-05-31T23:59:59.000+00:00',\n        '2023-06-30T23:59:59.000+00:00', '2023-07-31T23:59:59.000+00:00',\n        '2023-08-31T23:59:59.000+00:00', '2023-09-30T23:59:59.000+00:00',\n        '2023-10-31T23:59:59.000+00:00'],\n       ['2024-04-30T23:59:59.000+00:00', '2024-05-31T23:59:59.000+00:00',\n        '2024-06-30T23:59:59.000+00:00', '2024-07-31T23:59:59.000+00:00',\n        '2024-08-31T23:59:59.000+00:00', '2024-09-30T23:59:59.000+00:00',\n        '2024-10-31T23:59:59.000+00:00']], dtype='&lt;U29')proj:transform()object{0, 1, 7800000, 10, 50000, -10}array({0, 1, 7800000, 10, 50000, -10}, dtype=object)title()&lt;U4'ndvi'array('ndvi', dtype='&lt;U4')epsg()int6432635array(32635)cubo:distance_from_center(y, x)float642.828e+04 2.828e+04 ... 2.827e+04array([[28284.27205024, 28277.20009856, 28270.1299151 , ...,\n        28255.99502103, 28263.06166413, 28270.1300781 ],\n       [28277.20363494, 28270.12991505, 28263.05796294, ...,\n        28248.91953028, 28255.98794292, 28263.05812599],\n       [28270.13698962, 28263.06150108, 28255.98777987, ...,\n        28241.84580774, 28248.91599036, 28255.98794296],\n       ...,\n       [28270.13698875, 28263.06150021, 28255.987779  , ...,\n        28241.84580687, 28248.91598949, 28255.98794209],\n       [28277.20363407, 28270.12991418, 28263.05796207, ...,\n        28248.91952941, 28255.98794205, 28263.05812511],\n       [28284.27204936, 28277.20009769, 28270.12991422, ...,\n        28255.99502015, 28263.06166326, 28270.13007723]])spatial_ref()int640crs_wkt :PROJCS[\"EUREF-FIN / TM35FIN(E,N)\",GEOGCS[\"EUREF-FIN\",DATUM[\"EUREF-FIN\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"1391\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"10690\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"3067\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314140356inverse_flattening :298.257222101reference_ellipsoid_name :GRS 1980longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :EUREF-FINhorizontal_datum_name :EUREF-FINprojected_crs_name :EUREF-FIN / TM35FIN(E,N)grid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :27.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"EUREF-FIN / TM35FIN(E,N)\",GEOGCS[\"EUREF-FIN\",DATUM[\"EUREF-FIN\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"1391\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"10690\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"3067\"]]array(0)Indexes: (5)yearPandasIndexPandasIndex(Index([2018, 2019, 2020, 2021, 2022, 2023, 2024], dtype='int64', name='year'))monthPandasIndexPandasIndex(Index([4, 5, 6, 7, 8, 9, 10], dtype='int64', name='month'))bandPandasIndexPandasIndex(Index(['ndvi'], dtype='object', name='band'))xPandasIndexPandasIndex(Index([437330.0, 437340.0, 437350.0, 437360.0, 437370.0, 437380.0, 437390.0,\n       437400.0, 437410.0, 437420.0,\n       ...\n       477230.0, 477240.0, 477250.0, 477260.0, 477270.0, 477280.0, 477290.0,\n       477300.0, 477310.0, 477320.0],\n      dtype='float64', name='x', length=4000))yPandasIndexPandasIndex(Index([7722550.0, 7722540.0, 7722530.0, 7722520.0, 7722510.0, 7722500.0,\n       7722490.0, 7722480.0, 7722470.0, 7722460.0,\n       ...\n       7682650.0, 7682640.0, 7682630.0, 7682620.0, 7682610.0, 7682600.0,\n       7682590.0, 7682580.0, 7682570.0, 7682560.0],\n      dtype='float64', name='y', length=4000))Attributes: (0)\n\n\nIf the intermediate data need to be saved, it is done by uncommenting the following lines.\n\n#da_filled = da_filled.compute()\n#da_filled = da_filled.stack(time=['year', 'month']).sortby('time')\n#da_filled.rio.write_crs('EPSG:3067', inplace=True)\n#for t in da_filled['time'].values:\n#    da_t = da_filled.sel(time=t, band='ndvi')\n#    fname = f\"stac_data/filled/filled_{t[0]}_{t[1]}.tif\" \n#    da_t.rio.to_raster(fname)"
  },
  {
    "objectID": "processing_flow_stac.html#derive-the-statistics",
    "href": "processing_flow_stac.html#derive-the-statistics",
    "title": "Gapless S2 index mosaics",
    "section": "Derive the statistics",
    "text": "Derive the statistics\nMax, mean, median and sum are really straightforward.\n\nda_filled = da_filled.chunk({'x':1024, 'y':1024, 'month':-1})\n\nyearly_max = da_filled.max(dim='month', skipna=True)\nyearly_mean = da_filled.mean(dim='month', skipna=True)\nyearly_median = da_filled.median(dim='month', skipna=True)\nyearly_sum =  da_filled.sum(dim='month', skipna=True)\n\n\nfor y in yearly_max.year.values:\n    yearly_max.sel(year=y, band='ndvi').compute().rio.write_crs('EPSG:3067').astype(np.uint8).rio.to_raster(f'stac_data/stats/max_{y}.tif')\n\n\nfor y in yearly_mean.year.values:\n    yearly_mean.sel(year=y, band='ndvi').rio.write_crs('EPSG:3067').astype(np.uint8).rio.to_raster(f'stac_data/stats/mean_{y}.tif')\n\n\nfor y in yearly_median.year.values:\n    yearly_median.sel(year=y, band='ndvi').rio.write_crs('EPSG:3067').astype(np.uint8).rio.to_raster(f'stac_data/stats/median_{y}.tif')\n\n\nfor y in yearly_sum.year.values:\n    yearly_sum.sel(year=y, band='ndvi').rio.write_crs('EPSG:3067').astype(np.uint16).rio.to_raster(f'stac_data/stats/sum_{y}.tif')\n\nQuantiles, on the other hand, not so much. fastnanquantile makes computing them a lot faster.\n\nfrom fastnanquantile import xrcompat\n\nFirst, the DataArray needs to be rechunked.\n\nda_q = da_filled.chunk({'month':-1})\n\nThen xrcompat.xr_apply_nanquantile can be used efficiently. Derive Q10 and Q25.\n\nyearly_q10 = xrcompat.xr_apply_nanquantile(da_q, q=0.1, dim='month')\n\n\nfor y in yearly_q10.year.values:\n    yearly_q10.sel(year=y, band='ndvi').rio.write_crs('EPSG:3067').astype(np.uint8).rio.to_raster(f'stac_data/stats/q10_{y}.tif')\n\n\nyearly_q25 = xrcompat.xr_apply_nanquantile(da_q, q=0.25, dim='month')\nfor y in yearly_q25.year.values:\n    yearly_q25.sel(year=y, band='ndvi').rio.write_crs('EPSG:3067').astype(np.uint8).rio.to_raster(f'stac_data/stats/q25_{y}.tif')\n\nAmplitude is \\(max - yearly\\_q25\\)\n\nyearly_amplitude = yearly_max - yearly_q25\n\n\nfor y in yearly_amplitude.year.values:\n    yearly_amplitude.sel(year=y, band='ndvi').rio.write_crs('EPSG:3067').astype(np.int16).rio.to_raster(f'stac_data/stats/amp_{y}.tif')"
  }
]